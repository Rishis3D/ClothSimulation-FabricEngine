/// \version 1.0
/// \file Particle.kl
///
/// \brief The main softbody simulation object, can be configured using a stack of forces and constraints. Integrator can be chosen by plugging that in too.
///
/// \author Tom Minor, NCCA, Bournemouth University
/// \date 09/05/16
///
/// \todo 	A bit haphazard right now, the polygon mesh is stored internally
///			which makes resetting go funky because I'm modifying the original instead of a copy.
///			Also attributes are stored directly in the mesh, would make more sense to store those on an
///			internal copy too.

require Math;
require Geometry;

/**
 * @brief The Cloth object extends the Points functionality with soft body dynamics simulated using constraints. 
 * Building 
 * 
 * Per vertex data is stored in GeometryAttributes, such as mass and acceleration.
 * 
 */
object ClothSimulation : Points
{
	Ref<PolygonMesh> mesh;

	Boolean isActive;
	Boolean isInit;

	Ref<GeometryAttributes> attrs;

	//Per Vertex _attributes
	IntegerAttribute attribMovable;
	ScalarAttribute attribMass;
	Vec3Attribute attribPrevPos;
	Vec3Attribute attribAcceleration;

	// Force stack
	BaseForce forceStack[];

	// Constraint stack
	BaseConstraint constraintStack[];

	BaseIntegrator integrator;

	Lines constraintDebug[8]; // Debug lines for constraints
};

/**
 * Constructor initializes the cloth constraints based on the topology of the PolygonMesh.
 * Quad based meshes will work best.
 * 
 * \param _mesh will be used to initialize the constraint setup of the cloth.
 * \param _forceStack holds all the forces to be evaluated every simulation step
 * \param _constraintStack holds all the constraints to be evaluated every simulation step
 * \param _integrator is used to evaluate every simulation step
 * \param _rows
 * \param _cols
 */
function ClothSimulation(in PolygonMesh _mesh, BaseForce _forceStack[], BaseConstraint _constraintStack[], BaseIntegrator _integrator, UInt32 _rows, UInt32 _cols)
{
	this.isInit = false;
	report("Initialising cloth sim");

	this.mesh = _mesh;
	this.attrs = this.mesh.attributes;//getAttributes();

	this.forceStack = _forceStack;
	this.integrator = _integrator;
	this.constraintStack = _constraintStack;

	if( this.integrator == null ) {
		this.integrator = VerletIntergrator();	
	}

	// Initialise attributes
	Vec3Attribute oldPositions = this.attrs.getPositions().clone();
	Vec3Attribute velocities = this.attrs.getOrCreateVec3Attribute('velocities');
	IntegerAttribute movable = this.attrs.getOrCreateIntegerAttribute('movable');
	
	// Pin the cloth at these points for testing
	// for (Index row = 0; _rows <= adjRows; ++row)
	// {
	// 	movable.values[_rows * (adjCols + 1)] = true;
	// }
	
	for(Index i = 0; i < movable.size(); i++)
	{
		if(i < 40)
		{
			movable.values[i] = false;
		}
		else
		{
			movable.values[i] = true;
		}
	}

	// Initialise lines array
	for(Index i = 0; i < 8; i++)
	{
		this.constraintDebug[i] = Lines();
	}

	// Initialise constraint data
	for(Index i = 0; i < this.constraintStack.size(); i++)
	{
		this.constraintStack[i].init(this);
	}

	report("Initialising cloth sim complete");
	this.isInit = true;
}

/**
 * @brief      Steps the simulation forward in time by evaluating the chosen integrator to calculate particle movement.
 *
 */
function ClothSimulation.stepSimulation!(Float64 _time)
{
	if(!this.isInit)
	{
		report("Simulation needs re-initialising!");
		return;
	}

	//Solve constraints
	for(Index i = 0; i < this.constraintStack.size(); ++i)
	{
		 this.constraintStack[i].solve(this.attrs);
	}

	//Solve forces
	for(Index i = 0; i < this.forceStack.size(); ++i)
	{
		this.forceStack[i].update();
		this.forceStack[i].apply(this.attrs);
	}

	//Integrate
	this.integrator.apply(this.attrs);

	report("Stepping Simulation");
}

Lines[8] ClothSimulation.getDebugLines()
{
	return this.constraintDebug;
}

Vec3[] ClothSimulation.getAllPoints()
{
	Vec3Attribute pos = this.attrs.getAttribute("positions", Vec3Attribute);
	return pos.values;
}

PolygonMesh ClothSimulation.getMesh()
{
	return this.mesh;
}