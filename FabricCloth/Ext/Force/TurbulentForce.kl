/// \version 1.0
/// \file TurbulentForce.kl
///
/// \brief Applies a noise force to the cloth simulation
///
/// \author Tom Minor, NCCA, Bournemouth University
/// \date 09/05/16
///
/// \todo Force stack currently isn't re-evaluated every frame, which means time based
///       turbulence is an issue.

require Geometry;

/// \dfgPresetFolder  Forces
object TurbulentForce : BaseForce
{
	Vec3 center;
	Float32 amplitude;
	Vec3 frequency;
};

/// \dfgPresetFolder Forces
function TurbulentForce( Vec3 _center, Float32 _amplitude, Vec3 _frequency )
{
  // todo calculate center based on time
	this.center = _center;
	this.amplitude = _amplitude;
	this.frequency = _frequency;
}

/// \dfgPresetFolder Forces
/// \internal
function TurbulentForce.initialise!()
{
	// Empty
}

/// \dfgPresetFolder Forces
/// \internal
function TurbulentForce.apply!(io Ref<GeometryAttributes> attrs)
{
  Ref<Vec3Attribute> positions = attrs.getPositions();
	Ref<Vec3Attribute> velocities = attrs.getOrCreateVec3Attribute('velocities');
  Ref<IntegerAttribute> movable = attrs.getOrCreateIntegerAttribute('movable');
  	
  // Update in parallel
  applyTurbulize<<<velocities.values.size()>>>(
                            positions.values, 
                            velocities.values, 
                            movable.values,
                            this.center, this.amplitude, this.frequency);
	
  velocities.incrementVersion();
}


operator applyTurbulize<<<index>>>(
          io Vec3 positions[],
				  io Vec3 velocities[],
  				Integer movable[],
  				Vec3 center, Float32 amplitude, Vec3 frequency)
{
  if ( !movable[index] ) {
    Vec3 q = center + frequency * positions[index];
    velocities[index] += Vec3(	0.1 * amplitude * perlinNoise(q.x, q.z, q.y),
  				0.1 * amplitude * perlinNoise(q.y, q.x, q.z),
      				0.1 * amplitude * perlinNoise(q.z, q.y, q.x)
      		       	);
  }
}