/// \version 1.0
/// \file VerletIntegrator.kl
///
/// \brief Verlet integrator for particle sim.
///
/// \author Tom Minor, NCCA, Bournemouth University
/// \date 09/05/16
///
/// \todo Very unstable right now

require Geometry;

///
/// @briefImplements verlet integration to calculate particle movement
/// \dfgPresetFolder Integrators
///
object VerletIntergrator : BaseIntegrator
{
	Float32 rate;
};

///
/// @brief Default Constructor
/// \dfgPresetFolder Integrators
function VerletIntergrator()
{
	this.rate = 0.99; // Apply damping to the velocity
}

///
/// @brief Default Constructor
/// \dfgPresetFolder Integrators
function VerletIntergrator(Float32 _rate)
{
	this.rate = _rate;
}


///
/// \dfgPresetFolder Integrators
/// \internal
///
function VerletIntergrator.initialise!()
{
	
}

/// \dfgPresetFolder Integrators
/// \internal
function VerletIntergrator.apply!(io Ref<GeometryAttributes> attributes)
{
	Ref<Vec3Attribute> positions = attributes.getPositions();
	Ref<Vec3Attribute> oldPositions = attributes.getOrCreateVec3Attribute('oldPositions');
	Ref<Vec3Attribute> velocities = attributes.getOrCreateVec3Attribute('velocities');
	Ref<IntegerAttribute> movable = attributes.getOrCreateIntegerAttribute('movable');
	
	integrate<<<positions.values.size()>>>(	positions.values,
						oldPositions.values,
						velocities.values,
						movable.values,
						this.rate
						);

	positions.incrementVersion();
	oldPositions.incrementVersion();
	velocities.incrementVersion();
}

operator integrate<<<index>>>(
  io Vec3 positions[],
  io Vec3 oldPositions[],
  io Vec3 velocities[],
  io Integer movable[],
  Float32 rate
  )
{
	Float32 damping = 0.7; //@todo make constant somewhere
	Float32 TIME_STEPSIZE2 = 0.5 * 0.5;

	// Note: velocities are actually acceleration, gotta rename it
	if( movable[index] )
	{
		Vec3 pos = positions[index];
		Vec3 oldPos = oldPositions[index];
		Vec3 tmp = pos;
		pos += (pos - oldPos) * (1.0 - damping) + velocities[index]*TIME_STEPSIZE2;
		oldPos = tmp;

		positions[index] = pos;
		oldPositions[index] = oldPos;
		velocities[index] = Vec3(0.0, 0.0, 0.0);
	}
  // positions[index] += rate * velocities[index];
  // velocities[index] *= 0.99;
}
